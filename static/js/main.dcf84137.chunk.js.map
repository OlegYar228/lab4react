{"version":3,"sources":["components/Cell.js","components/Board.js","features/game/gameSlice.js","App.js","app/store.js","index.js"],"names":["Cell","_ref","isSnake","isFood","React","createElement","className","concat","Board","snake","food","Array","from","length","map","_","row","key","col","some","segment","x","y","DIRECTIONS","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","getRandomPosition","Math","floor","random","gameSlice","createSlice","name","initialState","direction","gameOver","reducers","setDirection","state","action","payload","moveSnake","newHead","newSnake","pop","resetGame","actions","App","dispatch","useDispatch","useSelector","game","useEffect","handleKeyDown","e","document","addEventListener","removeEventListener","intervalId","setInterval","clearInterval","onClick","store","configureStore","reducer","gameReducer","ReactDOM","createRoot","getElementById","render","Provider"],"mappings":"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","file":"static/js/main.dcf84137.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cell = ({ isSnake, isFood }) => {\r\n  return (\r\n    <div className={`cell ${isSnake ? 'snake' : ''} ${isFood ? 'food' : ''}`} />\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nconst BOARD_SIZE = 10;\r\n\r\nconst Board = ({ snake, food }) => {\r\n  return (\r\n    <div>\r\n      {Array.from({ length: BOARD_SIZE }).map((_, row) => (\r\n        <div className=\"row\" key={row}>\r\n          {Array.from({ length: BOARD_SIZE }).map((_, col) => {\r\n            const isSnake = snake.some(segment => segment.x === col && segment.y === row);\r\n            const isFood = food.x === col && food.y === row;\r\n            return (\r\n              <Cell key={col} isSnake={isSnake} isFood={isFood} />\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst BOARD_SIZE = 10;\r\nconst DIRECTIONS = {\r\n  ArrowUp: { x: 0, y: -1 },\r\n  ArrowDown: { x: 0, y: 1 },\r\n  ArrowLeft: { x: -1, y: 0 },\r\n  ArrowRight: { x: 1, y: 0 },\r\n};\r\n\r\nconst getRandomPosition = () => {\r\n  const x = Math.floor(Math.random() * BOARD_SIZE);\r\n  const y = Math.floor(Math.random() * BOARD_SIZE);\r\n  return { x, y };\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState: {\r\n    snake: [{ x: 2, y: 2 }],\r\n    direction: DIRECTIONS.ArrowRight,\r\n    food: getRandomPosition(),\r\n    gameOver: false,\r\n  },\r\n  reducers: {\r\n    setDirection(state, action) {\r\n      state.direction = action.payload;\r\n    },\r\n    moveSnake(state) {\r\n      const newHead = {\r\n        x: state.snake[0].x + state.direction.x,\r\n        y: state.snake[0].y + state.direction.y,\r\n      };\r\n\r\n      if (\r\n        newHead.x < 0 || newHead.x >= BOARD_SIZE ||\r\n        newHead.y < 0 || newHead.y >= BOARD_SIZE ||\r\n        state.snake.some(segment => segment.x === newHead.x && segment.y === newHead.y)\r\n      ) {\r\n        state.gameOver = true;\r\n        return;\r\n      }\r\n\r\n      const newSnake = [newHead, ...state.snake];\r\n      if (newHead.x === state.food.x && newHead.y === state.food.y) {\r\n        state.food = getRandomPosition();\r\n      } else {\r\n        newSnake.pop();\r\n      }\r\n\r\n      state.snake = newSnake;\r\n    },\r\n    resetGame(state) {\r\n      state.snake = [{ x: 2, y: 2 }];\r\n      state.direction = DIRECTIONS.ArrowRight;\r\n      state.food = getRandomPosition();\r\n      state.gameOver = false;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setDirection, moveSnake, resetGame } = gameSlice.actions;\r\nexport default gameSlice.reducer;\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setDirection, moveSnake, resetGame } from './features/game/gameSlice';\n\nconst DIRECTIONS = {\n  ArrowUp: { x: 0, y: -1 },\n  ArrowDown: { x: 0, y: 1 },\n  ArrowLeft: { x: -1, y: 0 },\n  ArrowRight: { x: 1, y: 0 },\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const { snake, food, gameOver, direction } = useSelector(state => state.game);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (DIRECTIONS[e.key]) {\n        dispatch(setDirection(DIRECTIONS[e.key]));\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!gameOver) {\n      const intervalId = setInterval(() => dispatch(moveSnake()), 200);\n      return () => clearInterval(intervalId);\n    }\n  }, [dispatch, gameOver, direction]);\n\n  return (\n    <div className=\"game-board\">\n      {gameOver ? (\n        <div className=\"game-over\">\n          Game Over\n          <button onClick={() => dispatch(resetGame())}>Restart</button>\n        </div>\n      ) : (\n        <Board snake={snake} food={food} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport gameReducer from '../features/game/gameSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameReducer,\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}